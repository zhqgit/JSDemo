{"version":3,"sources":["../../../../test/es6/scripts/stack.js"],"names":["LinkedStack","len","Node","el","next","stackSize","length","top","push","console","log","node","current","pop","size","toString","str","clear","stack","ArrayStack","arr","element"],"mappings":";;AAAA;;;;AAIA;AACA;;AAEA;AACA,SAASA,WAAT,CAAqBC,GAArB,EAA0B;;AAEtB;AACA,QAAIC,OAAO,SAAPA,IAAO,CAAUC,EAAV,EAAc;AACrB,aAAKA,EAAL,GAAUA,EAAV;AACA,aAAKC,IAAL,GAAY,IAAZ;AACH,KAHD;;AAKA;AACA,QAAIC,YAAYJ,GAAhB;;AAEA;AACA,QAAIK,SAAS,CAAb;;AAEA;AACA,QAAIC,MAAM,CAAC,CAAX;;AAEA,SAAKC,IAAL,GAAY,UAAUL,EAAV,EAAc;;AAEtB;AACA,YAAIG,UAAUD,SAAd,EAAyB;AACrBI,oBAAQC,GAAR,CAAY,IAAZ;AACA,mBAAO,KAAP;AACH,SAHD,MAGO;AACH,gBAAIC,OAAO,IAAIT,IAAJ,CAASC,EAAT,CAAX;AACA,gBAAIS,OAAJ;;AAEA;AACA,gBAAIL,OAAO,CAAC,CAAZ,EAAe;AACXA,sBAAMI,IAAN;AACAL;AACA,uBAAO,IAAP;AACH,aAJD,MAIO;AACHK,qBAAKP,IAAL,GAAYG,GAAZ;AACAA,sBAAMI,IAAN;AACAL;AACA,uBAAO,IAAP;AACH;AACJ;AACJ,KAtBD;;AAwBA,SAAKO,GAAL,GAAW,YAAY;AACnB,YAAID,UAAUL,GAAd;AACA,YAAIA,OAAO,CAAC,CAAZ,EAAe;AACXE,oBAAQC,GAAR,CAAY,YAAZ;AACA,mBAAO,KAAP;AACH,SAHD,MAGO;AACHH,kBAAMK,QAAQR,IAAd;AACAQ,oBAAQR,IAAR,GAAe,IAAf;AACAE;;AAEA;AACA,mBAAOM,OAAP;AACH;AACJ,KAbD;;AAeA;AACA,SAAKL,GAAL,GAAW,YAAY;AACnB,eAAOA,IAAIJ,EAAX;AACH,KAFD;;AAIA;AACA,SAAKW,IAAL,GAAY,YAAY;AACpB,eAAOR,MAAP;AACH,KAFD;;AAIA;AACA,SAAKS,QAAL,GAAgB,YAAY;AACxB,YAAIC,MAAM,EAAV;AACA,YAAIJ,UAAUL,GAAd;AACA,eAAOK,OAAP,EAAgB;AACZI,mBAAOJ,QAAQT,EAAf;AACAS,sBAAUA,QAAQR,IAAlB;AACH;;AAED,eAAOY,GAAP;AACH,KATD;;AAWA,SAAKC,KAAL,GAAa,YAAY;AACrBV,cAAM,CAAC,CAAP;AACAD,iBAAS,CAAT;;AAEA,eAAO,IAAP;AACH,KALD;AAMH;;AAED,IAAIY,QAAQ,IAAIlB,WAAJ,CAAgB,CAAhB,CAAZ;AACAkB,MAAMV,IAAN,CAAW,CAAX;AACAC,QAAQC,GAAR,CAAYQ,MAAMX,GAAN,EAAZ;;AAEA;AACA;AACA,SAASY,UAAT,GAAqB;AACjB,QAAIC,MAAM,EAAV;AACA;AACA,SAAKZ,IAAL,GAAY,UAASa,OAAT,EAAiB;AACzBD,YAAIZ,IAAJ,CAASa,OAAT;AACH,KAFD;AAGA;AACA,SAAKR,GAAL,GAAW,YAAU;AACjB,eAAOO,IAAIP,GAAJ,EAAP;AACH,KAFD;AAGA;AACA,SAAKN,GAAL,GAAW,YAAU;AACjB,eAAOa,IAAIA,IAAId,MAAJ,GAAW,CAAf,CAAP;AACH,KAFD;AAGA;AACA,SAAKQ,IAAL,GAAY,YAAU;AAClB,eAAOM,IAAId,MAAX;AACH,KAFD;AAGA;AACA,SAAKW,KAAL,GAAa,YAAU;AACnBG,cAAM,EAAN;AACA,eAAO,IAAP;AACH,KAHD;;AAKA,SAAKL,QAAL,GAAgB,YAAU;AACtB,eAAOK,IAAIL,QAAJ,EAAP;AACH,KAFD;AAGH","file":"stack.js","sourcesContent":["/**\r\n * Created by ZHQ on 2017/7/17.\r\n */\r\n\r\n// 实现一个栈，即后进先出\r\n// 栈应该是一个类还是一个函数？\r\n\r\n// 实现一个链栈类(初始化一个栈还需要为栈指定长度)\r\nfunction LinkedStack(len) {\r\n\r\n    // 节点结构\r\n    var Node = function (el) {\r\n        this.el = el;\r\n        this.next = null;\r\n    }\r\n\r\n    // 初始栈长度\r\n    var stackSize = len;\r\n\r\n    // 现在栈的长度\r\n    var length = 0;\r\n\r\n    // 栈顶指针，判断空栈的条件为top指针等于-1\r\n    var top = -1;\r\n\r\n    this.push = function (el) {\r\n\r\n        // 压栈之前要先判断是否已经栈满了\r\n        if (length == stackSize) {\r\n            console.log('栈满');\r\n            return false;\r\n        } else {\r\n            var node = new Node(el);\r\n            var current;\r\n\r\n            // 如果栈为空\r\n            if (top == -1) {\r\n                top = node;\r\n                length++;\r\n                return true;\r\n            } else {\r\n                node.next = top;\r\n                top = node;\r\n                length++;\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    this.pop = function () {\r\n        var current = top;\r\n        if (top == -1) {\r\n            console.log('栈空，无法执行退栈！');\r\n            return false;\r\n        } else {\r\n            top = current.next;\r\n            current.next = null;\r\n            length--;\r\n\r\n            // 退栈要返回弹出的元素\r\n            return current;\r\n        }\r\n    }\r\n\r\n    // 获取栈顶节点\r\n    this.top = function () {\r\n        return top.el;\r\n    }\r\n\r\n    // 获取当前栈长度\r\n    this.size = function () {\r\n        return length;\r\n    }\r\n\r\n    // 打印当前栈\r\n    this.toString = function () {\r\n        var str = '';\r\n        var current = top;\r\n        while (current) {\r\n            str += current.el;\r\n            current = current.next;\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n    this.clear = function () {\r\n        top = -1;\r\n        length = 0;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nvar stack = new LinkedStack(3);\r\nstack.push(1);\r\nconsole.log(stack.top());\r\n\r\n// 顺序栈的实现和JS普通数组类似\r\n//顺序栈的JS实现 这里直接使用了JS内置的Array对象\r\nfunction ArrayStack(){\r\n    var arr = [];\r\n    //压栈操作\r\n    this.push = function(element){\r\n        arr.push(element);\r\n    }\r\n    //退栈操作\r\n    this.pop = function(){\r\n        return arr.pop();\r\n    }\r\n    //获取栈顶元素\r\n    this.top = function(){\r\n        return arr[arr.length-1];\r\n    }\r\n    //获取栈长\r\n    this.size = function(){\r\n        return arr.length;\r\n    }\r\n    //清空栈\r\n    this.clear = function(){\r\n        arr = [];\r\n        return true;\r\n    }\r\n\r\n    this.toString = function(){\r\n        return arr.toString();\r\n    }\r\n}"]}