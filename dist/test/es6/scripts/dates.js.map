{"version":3,"sources":["../../../../test/es6/scripts/dates.js"],"names":["makeFriendlyDates","startDate","endDate","dateReg","test","console","log","start","Date","end","toDateString","toISOString","toJSON","toLocaleDateString","toLocaleString","toLocaleTimeString","toString","toTimeString","toUTCString","valueOf","startYear","getFullYear","startMonth","getMonth","startDay","getDate","endYear","endMonth","endDay","monthName","retDate","getSmallDay","d","parseInt"],"mappings":"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","file":"dates.js","sourcesContent":["/**\r\n * Created by ZHQ on 2017/7/17.\r\n */\r\n\r\nlet makeFriendlyDates = function (startDate, endDate) {\r\n    // 判断输入的格式 2016-10-10\r\n    let dateReg = /^(\\d{4})-(\\d{2})-(\\d{2})$/;\r\n\r\n    if (dateReg.test(startDate) && dateReg.test(endDate)) {\r\n        console.log('正确的日期格式');\r\n\r\n        // 在ES6中，变量的命名不要和参数相同，相同可能会导致错误\r\n        // new Date() 中传入的参数如果是字符串会先调用Date.parse()函数将其解析为相应的毫秒数\r\n        let start = new Date(startDate);\r\n        let end = new Date(endDate);\r\n\r\n        console.log(start.toDateString());         // Thu Oct 20 2016\r\n        console.log(start.toISOString());          // 2016-10-20T00:00:00.000Z\r\n        console.log(start.toJSON());               // 2016-10-20T00:00:00.000Z\r\n        console.log(start.toLocaleDateString());   // 2016-10-20\r\n        console.log(start.toLocaleString());       // 2016-10-20 08:00:00\r\n        console.log(start.toLocaleTimeString());   // 08:00:00\r\n        console.log(start.toString());             // Thu Oct 20 2016 08:00:00 GMT+0800 (中国标准时间)\r\n        console.log(start.toTimeString());         // 08:00:00 GMT+0800 (中国标准时间)\r\n        console.log(start.toUTCString());          // Thu, 20 Oct 2016 00:00:00 GMT\r\n        console.log(start.valueOf());              // 1476921600000\r\n        // Date.parse() 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数\r\n        // 如果该字符串无法识别，或者一些情况下，包含了不合法的日期数值（如：2015-02-31），则返回值为NaN。\r\n\r\n        // 获得年月日\r\n        // getDay()函数是获得星期的\r\n        let startYear = start.getFullYear(),\r\n            startMonth = start.getMonth(),\r\n            startDay = start.getDate();\r\n\r\n        let endYear = end.getFullYear(),\r\n            endMonth = end.getMonth(),\r\n            endDay = end.getDate();\r\n\r\n        let monthName = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n        let retDate = [];\r\n        if (startYear == endYear) {\r\n            if (startMonth == endMonth) {\r\n                retDate[0] = monthName[startMonth] + ' ' + getSmallDay(startDay);\r\n                retDate[1] = getSmallDay(endDay);\r\n            } else {\r\n                retDate[0] = monthName[startMonth]  + ' ' + getSmallDay(startDay);\r\n                retDate[1] = monthName[endMonth]  + ' '+ getSmallDay(endDay);\r\n            }\r\n        } else {\r\n            retDate[0] = monthName[startMonth] + ' ' + getSmallDay(startDay) + \",\" + startYear;\r\n            retDate[1] = monthName[endMonth]  + ' '+ getSmallDay(endDay) + \",\" + endYear;\r\n        }\r\n\r\n        console.log(retDate);\r\n\r\n    }\r\n\r\n    function getSmallDay(d){\r\n        d = parseInt(d);\r\n        if(d===1 || d===21 || d===31){\r\n            return d+\"st\";\r\n        }\r\n        else if(d===2 || d==22){\r\n            return d+\"nd\";\r\n        }\r\n        else if(d===3 || d===23){\r\n            return d+\"rd\";\r\n        }\r\n        else if((d>=4&&d<=20)||(d>=24&&d<=30)){\r\n            return d+\"th\";\r\n        }\r\n    }\r\n};\r\n\r\nmakeFriendlyDates('2016-10-20', '2017-02-01');\r\n"]}